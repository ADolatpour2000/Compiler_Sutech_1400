/* The following code was generated by JFlex 1.6.1 */

package com.company;
import static com.company.Token.*;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/amirreza dolatpour/Documents/ai-n-queens-master/Compiler/src/com/company/Scanner.flex</tt>
 */
class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\3\1\70\1\70\1\1\22\0\1\40\1\60\1\0"+
    "\1\0\1\16\1\63\1\64\1\17\1\47\1\50\1\62\1\13\1\0"+
    "\1\61\1\14\1\66\1\4\3\6\4\6\1\5\1\74\1\77\1\67"+
    "\1\57\1\56\1\55\1\76\1\0\1\72\2\10\1\15\1\12\1\15"+
    "\5\75\1\11\6\75\1\46\4\75\1\7\1\75\1\73\1\53\1\20"+
    "\1\54\1\0\1\16\1\0\1\36\1\21\1\35\1\42\1\32\1\22"+
    "\1\45\1\27\1\30\1\75\1\37\1\31\1\75\1\23\1\24\1\43"+
    "\1\75\1\25\1\33\1\34\1\44\1\41\1\26\1\7\1\75\1\71"+
    "\1\51\1\65\1\52\7\0\1\70\u1fa2\0\1\70\1\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\2\2\1\3\1\4\2\0\17\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\0\1\16\1\17\1\20\2\0\1\21\1\22\1\11"+
    "\1\2\2\0\1\2\1\0\2\23\1\24\1\0\10\3"+
    "\1\25\17\3\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\2\0\1\2\1\23\1\0\1\35\2\3\1\36"+
    "\5\3\1\37\16\3\2\0\4\3\1\40\2\3\1\41"+
    "\1\42\2\3\1\43\1\44\1\3\1\45\1\46\1\47"+
    "\4\3\2\0\1\3\1\50\1\51\1\52\1\3\1\53"+
    "\1\3\1\0\7\3\2\0\1\3\1\54\1\55\1\0"+
    "\1\56\1\57\1\3\1\60\1\3\1\61\1\62\2\0"+
    "\1\63\1\64\1\3\1\65\2\0\1\66\11\0\2\67"+
    "\7\0\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\300\0\300\0\300\0\300\0\300\0\300\0\u0640"+
    "\0\u0680\0\u06c0\0\u0700\0\u0740\0\300\0\300\0\u0780\0\u07c0"+
    "\0\u0800\0\300\0\u0840\0\u0880\0\u08c0\0\u0900\0\300\0\u0940"+
    "\0\u0980\0\300\0\300\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0"+
    "\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0180\0\u0c00\0\u0c40\0\u0c80"+
    "\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80"+
    "\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\300\0\300\0\300\0\300"+
    "\0\300\0\300\0\300\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0"+
    "\0\300\0\u1100\0\u1140\0\u0180\0\u1180\0\u11c0\0\u1200\0\u1240"+
    "\0\u1280\0\u0180\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400"+
    "\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600"+
    "\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u0180\0\u17c0"+
    "\0\u1800\0\u0180\0\u1840\0\u1880\0\u18c0\0\u0180\0\u0180\0\u1900"+
    "\0\u0180\0\u0180\0\u0180\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u1ac0\0\u0180\0\u0180\0\u0180\0\u1b00\0\u0180\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40"+
    "\0\u1d80\0\u1dc0\0\u1e00\0\u0180\0\u0180\0\u1e40\0\u0180\0\u0180"+
    "\0\u1e80\0\u0180\0\u1ec0\0\u0180\0\u0180\0\u1f00\0\u1f40\0\u0180"+
    "\0\300\0\u1f80\0\u0180\0\u1fc0\0\u2000\0\u0180\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\300\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440"+
    "\0\300";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\2\6\4\7\1\10\1\11"+
    "\2\7\1\12\1\0\1\13\1\14\1\15\1\7\1\16"+
    "\1\17\1\7\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\7\1\4\1\26\1\27\1\30\2\7\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\0\3\7\1\6\1\7\3\0\1\3\2\4\1\5"+
    "\2\6\4\7\1\10\1\11\2\7\1\12\1\0\1\13"+
    "\1\14\1\15\1\7\1\16\1\17\1\7\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\7\1\4\1\26\1\27"+
    "\1\30\2\7\1\31\1\32\1\33\1\34\1\35\1\53"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\0\3\7\1\6\1\7"+
    "\5\0\1\4\200\0\1\54\1\55\1\54\1\56\1\0"+
    "\1\57\1\60\1\0\1\61\1\62\4\0\1\62\6\0"+
    "\1\57\1\60\7\0\1\62\31\0\1\55\7\0\3\6"+
    "\2\0\1\57\1\60\1\0\1\61\1\62\4\0\1\62"+
    "\6\0\1\57\1\60\7\0\1\62\31\0\1\6\7\0"+
    "\7\7\2\0\2\7\2\0\17\7\1\0\6\7\22\0"+
    "\5\7\15\0\1\63\70\0\3\61\65\0\1\61\7\0"+
    "\7\64\2\0\1\64\3\0\17\64\1\0\6\64\22\0"+
    "\5\64\6\0\7\7\2\0\2\7\2\0\3\7\1\65"+
    "\1\66\12\7\1\0\6\7\22\0\5\7\6\0\7\7"+
    "\2\0\2\7\2\0\3\7\1\67\4\7\1\70\4\7"+
    "\1\71\1\7\1\0\6\7\22\0\5\7\6\0\7\7"+
    "\2\0\2\7\2\0\17\7\1\0\3\7\1\72\2\7"+
    "\22\0\5\7\6\0\7\7\2\0\2\7\2\0\11\7"+
    "\1\73\5\7\1\0\6\7\22\0\5\7\6\0\7\7"+
    "\2\0\2\7\2\0\6\7\1\74\10\7\1\0\6\7"+
    "\22\0\5\7\6\0\7\7\2\0\2\7\2\0\1\7"+
    "\1\75\1\76\14\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\3\7\1\77\13\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\10\7\1\100\6\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\5\7\1\101\5\7\1\102"+
    "\3\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\4\7\1\103\1\7\1\104\10\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\3\7\1\105\2\7\1\106\6\7\1\107\1\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\3\7\1\110\13\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\3\7\1\111\5\7\1\112"+
    "\5\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\17\7\1\0\3\7\1\113\2\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\13\7\1\114"+
    "\3\7\1\0\6\7\22\0\5\7\60\0\1\115\77\0"+
    "\1\116\77\0\1\117\77\0\1\120\102\0\1\121\102\0"+
    "\1\122\100\0\1\123\32\0\1\124\115\0\1\125\45\0"+
    "\1\54\1\55\1\54\2\0\1\57\1\60\1\0\1\61"+
    "\1\62\4\0\1\62\6\0\1\57\1\60\7\0\1\62"+
    "\31\0\1\55\7\0\3\55\3\0\1\60\1\0\1\61"+
    "\1\62\4\0\1\62\7\0\1\60\7\0\1\62\31\0"+
    "\1\55\7\0\3\126\1\0\1\126\1\0\1\126\2\0"+
    "\1\126\3\0\2\126\7\0\1\126\2\0\2\126\3\0"+
    "\1\126\27\0\1\126\1\0\1\126\7\0\3\127\4\0"+
    "\1\130\45\0\1\130\12\0\1\127\7\0\3\61\3\0"+
    "\1\60\2\0\1\62\4\0\1\62\7\0\1\60\7\0"+
    "\1\62\31\0\1\61\22\0\1\131\64\0\7\7\2\0"+
    "\2\7\2\0\3\7\1\132\13\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\11\7\1\133"+
    "\5\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\4\7\1\134\12\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\3\7\1\135"+
    "\13\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\10\7\1\136\6\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\10\7\1\137"+
    "\6\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\13\7\1\140\3\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\7\7\1\141"+
    "\7\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\13\7\1\142\3\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\2\7\1\143"+
    "\14\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\12\7\1\144\4\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\7\7\1\145"+
    "\7\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\15\7\1\146\1\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\17\7\1\0"+
    "\3\7\1\147\2\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\11\7\1\150\5\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\2\7\1\151"+
    "\14\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\15\7\1\152\1\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\12\7\1\153"+
    "\4\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\7\7\1\154\7\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\17\7\1\0"+
    "\3\7\1\155\2\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\1\7\1\156\15\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\1\157\16\7"+
    "\1\0\6\7\22\0\5\7\6\0\7\7\2\0\2\7"+
    "\2\0\4\7\1\160\12\7\1\0\6\7\22\0\5\7"+
    "\64\0\1\161\76\0\1\162\22\0\3\126\1\0\1\126"+
    "\1\57\1\126\2\0\1\126\3\0\2\126\6\0\1\57"+
    "\1\126\2\0\2\126\3\0\1\126\27\0\1\126\1\0"+
    "\1\126\7\0\3\127\6\0\1\62\4\0\1\62\17\0"+
    "\1\62\31\0\1\127\7\0\3\127\65\0\1\127\7\0"+
    "\7\7\2\0\2\7\2\0\10\7\1\163\6\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\15\7\1\164\1\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\15\7\1\165\1\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\12\7\1\166\4\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\10\7\1\167\6\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\17\7\1\0\3\7\1\170\2\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\10\7\1\171\6\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\17\7\1\0\4\7\1\172\1\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\11\7\1\173\5\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\13\7\1\174\3\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\13\7\1\175\3\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\11\7\1\176\5\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\2\7\1\177\14\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\13\7\1\200\3\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\4\7\1\201\12\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\11\7\1\202\5\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\17\7\1\0\1\7\1\203"+
    "\4\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\1\204\16\7\1\0\6\7\22\0\5\7\6\0\7\7"+
    "\2\0\2\7\2\0\15\7\1\205\1\7\1\0\6\7"+
    "\22\0\5\7\6\0\7\7\2\0\2\7\2\0\10\7"+
    "\1\206\6\7\1\0\6\7\22\0\5\7\6\0\7\7"+
    "\2\0\2\7\2\0\7\7\1\207\7\7\1\0\6\7"+
    "\22\0\5\7\51\0\1\210\121\0\1\211\12\0\7\7"+
    "\2\0\2\7\2\0\11\7\1\212\5\7\1\0\6\7"+
    "\22\0\5\7\6\0\7\7\2\0\2\7\2\0\16\7"+
    "\1\213\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\13\7\1\214\3\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\11\7\1\215"+
    "\5\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\4\7\1\216\12\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\11\7\1\217"+
    "\5\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\7\7\1\220\7\7\1\221\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\14\7\1\222"+
    "\2\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\7\7\1\223\7\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\7\7\1\224"+
    "\7\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\10\7\1\225\6\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\17\7\1\0"+
    "\3\7\1\226\2\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\7\7\1\227\7\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\2\7\1\230"+
    "\14\7\1\0\6\7\22\0\5\7\100\0\1\231\73\0"+
    "\1\232\11\0\7\7\2\0\2\7\2\0\15\7\1\233"+
    "\1\7\1\0\6\7\22\0\5\7\6\0\7\7\2\0"+
    "\2\7\2\0\2\7\1\234\14\7\1\0\6\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\1\7\1\235"+
    "\15\7\1\0\6\7\22\0\5\7\32\0\1\236\53\0"+
    "\7\7\2\0\2\7\2\0\6\7\1\237\10\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\14\7\1\240\2\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\2\7\1\241\14\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\11\7\1\242\5\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\10\7\1\243\6\7\1\0"+
    "\6\7\22\0\5\7\6\0\7\7\2\0\2\7\2\0"+
    "\14\7\1\244\2\7\1\0\6\7\22\0\5\7\6\0"+
    "\7\7\2\0\2\7\2\0\17\7\1\0\4\7\1\245"+
    "\1\7\22\0\5\7\101\0\1\246\61\0\1\247\22\0"+
    "\7\7\2\0\2\7\2\0\2\7\1\250\14\7\1\0"+
    "\6\7\22\0\5\7\24\0\1\251\61\0\7\7\2\0"+
    "\2\7\2\0\17\7\1\0\3\7\1\252\2\7\22\0"+
    "\5\7\6\0\7\7\2\0\2\7\2\0\13\7\1\253"+
    "\3\7\1\0\6\7\22\0\5\7\16\0\1\254\156\0"+
    "\1\255\10\0\7\7\2\0\2\7\2\0\11\7\1\256"+
    "\5\7\1\0\6\7\22\0\5\7\67\0\1\257\16\0"+
    "\1\260\146\0\1\261\105\0\1\262\36\0\1\263\153\0"+
    "\1\264\26\0\1\265\130\0\1\266\43\0\1\267\60\0"+
    "\1\270\1\0\1\271\64\0\1\271\34\0\1\272\55\0"+
    "\1\271\150\0\1\273\73\0\1\274\111\0\1\275\113\0"+
    "\1\276\21\0\1\277\141\0\1\300\103\0\1\301\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9344];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\4\1\2\0\17\1\6\11\3\1"+
    "\1\0\1\1\2\11\2\0\1\1\1\11\2\1\2\0"+
    "\1\11\1\0\1\1\2\11\1\0\30\1\7\11\2\0"+
    "\2\1\1\0\1\11\27\1\2\0\25\1\2\0\7\1"+
    "\1\0\7\1\2\0\3\1\1\0\7\1\2\0\1\1"+
    "\1\11\2\1\2\0\1\1\11\0\1\1\1\11\7\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 57: break;
          case 2: 
            { return INTEGER_NUMBER;
            }
          case 58: break;
          case 3: 
            { return IDENTICAL;
            }
          case 59: break;
          case 4: 
            { return PLUS;
            }
          case 60: break;
          case 5: 
            { return LEFT_PARENTHESIS;
            }
          case 61: break;
          case 6: 
            { return RIGHT_PARENTHESIS;
            }
          case 62: break;
          case 7: 
            { return LEFTCURLY;
            }
          case 63: break;
          case 8: 
            { return RIGHTCURLY;
            }
          case 64: break;
          case 9: 
            { return LEFTSQ;
            }
          case 65: break;
          case 10: 
            { return RIGHTSQ;
            }
          case 66: break;
          case 11: 
            { return GREATER;
            }
          case 67: break;
          case 12: 
            { return ASSIGNMENT;
            }
          case 68: break;
          case 13: 
            { return LOWER;
            }
          case 69: break;
          case 14: 
            { return MINUS;
            }
          case 70: break;
          case 15: 
            { return PRODUCTION;
            }
          case 71: break;
          case 16: 
            { return REMAINED;
            }
          case 72: break;
          case 17: 
            { return DEVISION;
            }
          case 73: break;
          case 18: 
            { return SEMICOLON;
            }
          case 74: break;
          case 19: 
            { return FLOAT_NUMBER;
            }
          case 75: break;
          case 20: 
            { return PLUS_PLUS;
            }
          case 76: break;
          case 21: 
            { return IF;
            }
          case 77: break;
          case 22: 
            { return GREATER_EQUAL;
            }
          case 78: break;
          case 23: 
            { return COMPARISON;
            }
          case 79: break;
          case 24: 
            { return LOWER_EQUAL;
            }
          case 80: break;
          case 25: 
            { return NOT_EQUAL;
            }
          case 81: break;
          case 26: 
            { return MINUS_MINUS;
            }
          case 82: break;
          case 27: 
            { return LOGICAL_AND;
            }
          case 83: break;
          case 28: 
            { return LOGICAL_OR;
            }
          case 84: break;
          case 29: 
            { return Char_value;
            }
          case 85: break;
          case 30: 
            { return FOR;
            }
          case 86: break;
          case 31: 
            { return INT_TYPE;
            }
          case 87: break;
          case 32: 
            { return NULL;
            }
          case 88: break;
          case 33: 
            { return LONG_TYPE;
            }
          case 89: break;
          case 34: 
            { return ELSE;
            }
          case 90: break;
          case 35: 
            { return TRUE;
            }
          case 91: break;
          case 36: 
            { return THEN;
            }
          case 92: break;
          case 37: 
            { return CHAR_TYPE;
            }
          case 93: break;
          case 38: 
            { return CASE;
            }
          case 94: break;
          case 39: 
            { return VOID;
            }
          case 95: break;
          case 40: 
            { return BREAK;
            }
          case 96: break;
          case 41: 
            { return FLOAT_TYPE;
            }
          case 97: break;
          case 42: 
            { return FALSE;
            }
          case 98: break;
          case 43: 
            { return WHILE;
            }
          case 99: break;
          case 44: 
            { return RETURN;
            }
          case 100: break;
          case 45: 
            { return ELSEIF;
            }
          case 101: break;
          case 46: 
            { return SWITCH;
            }
          case 102: break;
          case 47: 
            { return STATIC;
            }
          case 103: break;
          case 48: 
            { return DOUBLE_TYPE;
            }
          case 104: break;
          case 49: 
            { return PUBLIC;
            }
          case 105: break;
          case 50: 
            { return STRING_TYPE;
            }
          case 106: break;
          case 51: 
            { return BOOLEAN_TYPE;
            }
          case 107: break;
          case 52: 
            { return ELSE_IF;
            }
          case 108: break;
          case 53: 
            { return DEFAULT;
            }
          case 109: break;
          case 54: 
            { return CONTINUE;
            }
          case 110: break;
          case 55: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 11);
            { return String_value;
            }
          case 111: break;
          case 56: 
            { return Comment;
            }
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
